#!/bin/sh

## Setup is basically thus:
##
## On your server:
##
## $ mkdir -p production.git /path/to/website
## $ cd production.git
## $ git init --bare
## $ git config core.worktree /path/to/website/son
## $ git config core.bare false
## $ git config receive.denycurrentbranch ignore
## $ git config eregansu.rotate true
## $ cp wherever-this-file-is hooks/post-receive
## $ chmod +x hooks/post-receive
## $ mkdir /path/to/website/shared
## $ mkdir /path/to/website/private
## $ chmod 733 /path/to/website/private
##
## On the client:
##
## $ git remote add production user@server.example.com:production.git
## $ git push production master
##
## Configure your web server to look at /path/to/website/current as its
## DocumentRoot (or whatever your server's equivalent is).
##
## The configuration above will rotate previous releases so that they
## can be very rapidly reverted with no knowledge of git, should something
## be pushed which shouldn't have been.
##
## For a development/staging site, you probably want to disable rotation,
## in which case the 'core.worktree' and 'eregansu.worktree' configuration
## lines above should be:
##
## $ git config core.worktree /path/to/website/current
## $ git config eregansu.rotate false
##
## Note that in a non-rotating configuration, if the setup phase
## fails, you'll be left with a broken deployment.
##
## There are two additional hook files which you can create, pre-deploy
## and post-deploy. In a rotating configuration, the pre-deploy hook
## is executed in the 'son' subdirectory, prior to it becoming 'current'.
## The post-deploy hook is executed immediately after it has been. In both
## cases, the current directory is that of the newly checked out release.
##
## In a non-rotating configuration, both pre-deploy and post-deploy hooks
## are executed right after 'current' has been updated.
##
## Once configured, you can simply 'git push production master' to
## deploy your master branch to the production server.

worktree="`git config --get core.worktree`"
if test x"$worktree" = x"" ; then
	echo "**** Detached working tree has not been configured for this repository; aborting" >&2
	exit 1
fi
deploy_to=`( cd $worktree/.. && pwd)`
here=`pwd`
rotate="`git config --bool --get eregansu.rotate`"

test x"$rotate" = x"" && rotate=false
test x"$GIT_DIR" = x"" && GIT_DIR=`pwd`

export GIT_DIR

if test x"$rotate" = x"true" ; then
        echo "---> Performing pre-deployment checkout in $deploy_to" >&2
        rm -rf "$worktree" || exit $?
        mkdir "$worktree" || exit $?
        git checkout -f || exit $?

	echo "---> Setting up the new release" >&2
	if test -x "$GIT_DIR/hooks/pre-deploy" ; then
		( cd "$worktree" && "$GIT_DIR/hooks/pre-deploy" ) || exit $?
	fi
	if test -d "$deploy_to/shared" ; then
		cd "$deploy_to/shared"
		for i in * ; do
			if test -e "$i" ; then
				echo "  +> Symlinking /$i" >&2
				( cd "$worktree" && rm -f "$i" && ln -s ../shared/"$i" . ) || exit $?
			fi
		done
	fi
        echo "---> Rotating previous releases" >&2
        rm -rf "$deploy_to/grandfather" || exit $?
        if test -d "$deploy_to/father" ; then
                mv "$deploy_to/grandfather" || exit $?
        fi
        echo "---> Deploying the new release to $deploy_to/current" >&2
        if test -d "$deploy_to/current" ; then
                mv "$deploy_to/current" "$deploy_to/father" || exit $?
        fi
        mv "$worktree" "$deploy_to/current" || exit $?
	worktree="$deploy_to/current"
else
        test -d "$worktree" || mkdir "$worktree" || exit $?
        git checkout -f || exit $?

        echo "---> Setting up the new release" >&2
	if test -x "$GIT_DIR/hooks/pre-deploy" ; then
		( cd "$worktree" && "$GIT_DIR/hooks/pre-deploy" ) || exit $?
	fi
	if test -d "$deploy_to/shared" ; then
		cd "$deploy_to/shared"
		for i in * ; do
			if test -e "$i" ; then
				echo "  +> Symlinking /$i" >&2
				( cd "$worktree" && rm -f "$i" && ln -s ../shared/"$i" . ) || exit $?
			fi
		done
	fi
fi

if test -x "$GIT_DIR/hooks/post-deploy" ; then
	echo "---> Performing post-deploying tasks" >&2
	( cd "$worktree" && "$GIT_DIR/hooks/post-deploy" ) || exit $?	
fi

echo "---> New release successfully deployed." >&2
